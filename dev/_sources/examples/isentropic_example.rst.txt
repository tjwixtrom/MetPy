.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_isentropic_example.py>`     to download the full example code
    .. rst-class:: sphx-glr-example-title

    .. _sphx_glr_examples_isentropic_example.py:


===================
Isentropic Analysis
===================

The MetPy function `mpcalc.isentropic_interpolation` allows for isentropic analysis from model
analysis data in isobaric coordinates.


.. code-block:: default

    import cartopy.crs as ccrs
    import cartopy.feature as cfeature
    import matplotlib.pyplot as plt
    import numpy as np
    import xarray as xr

    import metpy.calc as mpcalc
    from metpy.cbook import get_test_data
    from metpy.plots import add_metpy_logo, add_timestamp
    from metpy.units import units








**Getting the data**

In this example, [NARR reanalysis data](
https://www.ncdc.noaa.gov/data-access/model-data/model-datasets/north-american-regional-reanalysis-narr)
for 18 UTC 04 April 1987 from the National Centers for Environmental Information will be
used.


.. code-block:: default


    data = xr.open_dataset(get_test_data('narr_example.nc', False))









.. code-block:: default

    print(list(data.variables))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    ['Temperature', 'time', 'isobaric', 'y', 'x', 'Lambert_Conformal', 'lat', 'lon', 'u_wind', 'v_wind', 'Geopotential_height', 'Specific_humidity']




We will reduce the dimensionality of the data as it is pulled in to remove an empty time
dimension.


.. code-block:: default


    # Assign data to variable names
    lat = data['lat']
    lon = data['lon']
    lev = data['isobaric']
    times = data['time']

    tmp = data['Temperature'][0]
    uwnd = data['u_wind'][0]
    vwnd = data['v_wind'][0]
    spech = data['Specific_humidity'][0]

    # pint doesn't understand gpm
    data['Geopotential_height'].attrs['units'] = 'meter'
    hgt = data['Geopotential_height'][0]








To properly interpolate to isentropic coordinates, the function must know the desired output
isentropic levels. An array with these levels will be created below.


.. code-block:: default


    isentlevs = [296.] * units.kelvin








**Conversion to Isentropic Coordinates**

Once three dimensional data in isobaric coordinates has been pulled and the desired
isentropic levels created, the conversion to isentropic coordinates can begin. Data will be
passed to the function as below. The function requires that isentropic levels, isobaric
levels, and temperature be input. Any additional inputs (in this case relative humidity, u,
and v wind components) will be linearly interpolated to isentropic space.


.. code-block:: default


    isent_ana = mpcalc.isentropic_interpolation(isentlevs,
                                                lev,
                                                tmp,
                                                spech,
                                                uwnd,
                                                vwnd,
                                                hgt,
                                                temperature_out=True)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /opt/hostedtoolcache/Python/3.8.5/x64/lib/python3.8/site-packages/metpy/interpolate/one_dimension.py:147: UserWarning: Interpolation point out of data bounds encountered
      warnings.warn('Interpolation point out of data bounds encountered')




The output is a list, so now we will separate the variables to different names before
plotting.


.. code-block:: default


    isentprs, isenttmp, isentspech, isentu, isentv, isenthgt = isent_ana
    isentu.ito('kt')
    isentv.ito('kt')








A quick look at the shape of these variables will show that the data is now in isentropic
coordinates, with the number of vertical levels as specified above.


.. code-block:: default


    print(isentprs.shape)
    print(isentspech.shape)
    print(isentu.shape)
    print(isentv.shape)
    print(isenttmp.shape)
    print(isenthgt.shape)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    (1, 118, 292)
    (1, 118, 292)
    (1, 118, 292)
    (1, 118, 292)
    (1, 118, 292)
    (1, 118, 292)




**Converting to Relative Humidity**

The NARR only gives specific humidity on isobaric vertical levels, so relative humidity will
have to be calculated after the interpolation to isentropic space.


.. code-block:: default


    isentrh = 100 * mpcalc.relative_humidity_from_specific_humidity(isentprs, isenttmp, isentspech)








**Plotting the Isentropic Analysis**


.. code-block:: default


    # Set up our projection
    crs = ccrs.LambertConformal(central_longitude=-100.0, central_latitude=45.0)

    # Coordinates to limit map area
    bounds = [(-122., -75., 25., 50.)]
    # Choose a level to plot, in this case 296 K
    level = 0

    fig = plt.figure(figsize=(17., 12.))
    add_metpy_logo(fig, 120, 245, size='large')
    ax = fig.add_subplot(1, 1, 1, projection=crs)
    ax.set_extent(*bounds, crs=ccrs.PlateCarree())
    ax.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
    ax.add_feature(cfeature.STATES, linewidth=0.5)

    # Plot the surface
    clevisent = np.arange(0, 1000, 25)
    cs = ax.contour(lon, lat, isentprs[level, :, :], clevisent,
                    colors='k', linewidths=1.0, linestyles='solid', transform=ccrs.PlateCarree())
    cs.clabel(fontsize=10, inline=1, inline_spacing=7, fmt='%i', rightside_up=True,
              use_clabeltext=True)

    # Plot RH
    cf = ax.contourf(lon, lat, isentrh[level, :, :], range(10, 106, 5),
                     cmap=plt.cm.gist_earth_r, transform=ccrs.PlateCarree())
    cb = fig.colorbar(cf, orientation='horizontal', aspect=65, shrink=0.5, pad=0.05,
                      extendrect='True')
    cb.set_label('Relative Humidity', size='x-large')

    # Plot wind barbs
    ax.barbs(lon.values, lat.values, isentu[level, :, :].m, isentv[level, :, :].m, length=6,
             regrid_shape=20, transform=ccrs.PlateCarree())

    # Make some titles
    ax.set_title(f'{isentlevs[level]:~.0f} Isentropic Pressure (hPa), Wind (kt), '
                 'Relative Humidity (percent)', loc='left')
    add_timestamp(ax, times[0].values.astype('datetime64[ms]').astype('O'),
                  y=0.02, high_contrast=True)
    fig.tight_layout()




.. image:: /examples/images/sphx_glr_isentropic_example_001.png
    :alt: 296 K Isentropic Pressure (hPa), Wind (kt), Relative Humidity (percent)
    :class: sphx-glr-single-img





**Montgomery Streamfunction**

The Montgomery Streamfunction, :math:`{\psi} = gdz + CpT`, is often desired because its
gradient is proportional to the geostrophic wind in isentropic space. This can be easily
calculated with `mpcalc.montgomery_streamfunction`.


.. code-block:: default



    # Calculate Montgomery Streamfunction and scale by 10^-2 for plotting
    msf = mpcalc.montgomery_streamfunction(isenthgt, isenttmp) / 100.

    # Choose a level to plot, in this case 296 K
    level = 0

    fig = plt.figure(figsize=(17., 12.))
    add_metpy_logo(fig, 120, 250, size='large')
    ax = plt.subplot(111, projection=crs)
    ax.set_extent(*bounds, crs=ccrs.PlateCarree())
    ax.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
    ax.add_feature(cfeature.STATES.with_scale('50m'), linewidth=0.5)

    # Plot the surface
    clevmsf = np.arange(0, 4000, 5)
    cs = ax.contour(lon, lat, msf[level, :, :], clevmsf,
                    colors='k', linewidths=1.0, linestyles='solid', transform=ccrs.PlateCarree())
    cs.clabel(fontsize=10, inline=1, inline_spacing=7, fmt='%i', rightside_up=True,
              use_clabeltext=True)

    # Plot RH
    cf = ax.contourf(lon, lat, isentrh[level, :, :], range(10, 106, 5),
                     cmap=plt.cm.gist_earth_r, transform=ccrs.PlateCarree())
    cb = fig.colorbar(cf, orientation='horizontal', aspect=65, shrink=0.5, pad=0.05,
                      extendrect='True')
    cb.set_label('Relative Humidity', size='x-large')

    # Plot wind barbs.
    ax.barbs(lon.values, lat.values, isentu[level, :, :].m, isentv[level, :, :].m, length=6,
             regrid_shape=20, transform=ccrs.PlateCarree())

    # Make some titles
    ax.set_title(f'{isentlevs[level]:~.0f} Montgomery Streamfunction '
                 r'($10^{-2} m^2 s^{-2}$), Wind (kt), Relative Humidity (percent)', loc='left')
    add_timestamp(ax, times[0].values.astype('datetime64[ms]').astype('O'),
                  y=0.02, pretext='Valid: ', high_contrast=True)

    fig.tight_layout()
    plt.show()



.. image:: /examples/images/sphx_glr_isentropic_example_002.png
    :alt: 296 K Montgomery Streamfunction ($10^{-2} m^2 s^{-2}$), Wind (kt), Relative Humidity (percent)
    :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  10.438 seconds)


.. _sphx_glr_download_examples_isentropic_example.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: isentropic_example.py <isentropic_example.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: isentropic_example.ipynb <isentropic_example.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
