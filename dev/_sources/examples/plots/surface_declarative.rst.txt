.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_plots_surface_declarative.py>`     to download the full example code
    .. rst-class:: sphx-glr-example-title

    .. _sphx_glr_examples_plots_surface_declarative.py:


=========================================
Surface Analysis using Declarative Syntax
=========================================

The MetPy declarative syntax allows for a simplified interface to creating common
meteorological analyses including surface observation plots.


.. code-block:: default

    from datetime import datetime, timedelta

    import cartopy.crs as ccrs
    import pandas as pd

    from metpy.cbook import get_test_data
    import metpy.plots as mpplots








**Getting the data**

In this example, data is originally from the Iowa State ASOS archive
(https://mesonet.agron.iastate.edu/request/download.phtml) downloaded through a separate
Python script. The data are pre-processed to determine sky cover and weather symbols from
text output.


.. code-block:: default


    data = pd.read_csv(get_test_data('SFC_obs.csv', as_file_obj=False),
                       infer_datetime_format=True, parse_dates=['valid'])








**Plotting the data**

Use the declarative plotting interface to plot surface observations over the state of
Georgia.


.. code-block:: default


    # Plotting the Observations using a 15 minute time window for surface observations
    obs = mpplots.PlotObs()
    obs.data = data
    obs.time = datetime(1993, 3, 12, 13)
    obs.time_window = timedelta(minutes=15)
    obs.level = None
    obs.fields = ['tmpf', 'dwpf', 'emsl', 'cloud_cover', 'wxsym']
    obs.locations = ['NW', 'SW', 'NE', 'C', 'W']
    obs.colors = ['red', 'green', 'black', 'black', 'blue']
    obs.formats = [None, None, lambda v: format(10 * v, '.0f')[-3:], 'sky_cover',
                   'current_weather']
    obs.vector_field = ('uwind', 'vwind')
    obs.reduce_points = 1

    # Add map features for the particular panel
    panel = mpplots.MapPanel()
    panel.layout = (1, 1, 1)
    panel.area = 'ga'
    panel.projection = ccrs.PlateCarree()
    panel.layers = ['coastline', 'borders', 'states']
    panel.plots = [obs]

    # Collecting panels for complete figure
    pc = mpplots.PanelContainer()
    pc.size = (10, 10)
    pc.panels = [panel]

    # Showing the results
    pc.show()



.. image:: /examples/plots/images/sphx_glr_surface_declarative_001.png
    :alt: tmpf and dwpf and emsl and cloud_cover and wxsym
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /opt/hostedtoolcache/Python/3.8.5/x64/lib/python3.8/site-packages/cartopy/io/__init__.py:260: DownloadWarning: Downloading: https://naciscdn.org/naturalearth/10m/cultural/ne_10m_admin_0_boundary_lines_land.zip
      warnings.warn('Downloading: {}'.format(url), DownloadWarning)





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  2.435 seconds)


.. _sphx_glr_download_examples_plots_surface_declarative.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: surface_declarative.py <surface_declarative.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: surface_declarative.ipynb <surface_declarative.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
