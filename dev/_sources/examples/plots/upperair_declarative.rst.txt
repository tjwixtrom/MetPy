.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_plots_upperair_declarative.py>`     to download the full example code
    .. rst-class:: sphx-glr-example-title

    .. _sphx_glr_examples_plots_upperair_declarative.py:


===========================================
Upper Air Analysis using Declarative Syntax
===========================================

The MetPy declarative syntax allows for a simplified interface to creating common
meteorological analyses including upper air observation plots.


.. code-block:: default

    from datetime import datetime

    import pandas as pd

    from metpy.cbook import get_test_data
    import metpy.plots as mpplots
    from metpy.units import units









**Getting the data**

In this example, data is originally from the Iowa State Upper-air archive
(https://mesonet.agron.iastate.edu/archive/raob/) available through a Siphon method.
The data are pre-processed to attach latitude/longitude locations for each RAOB site.


.. code-block:: default


    data = pd.read_csv(get_test_data('UPA_obs.csv', as_file_obj=False))








**Plotting the data**

Use the declarative plotting interface to create a CONUS upper-air map for 500 hPa


.. code-block:: default


    # Plotting the Observations
    obs = mpplots.PlotObs()
    obs.data = data
    obs.time = datetime(1993, 3, 14, 0)
    obs.level = 500 * units.hPa
    obs.fields = ['temperature', 'dewpoint', 'height']
    obs.locations = ['NW', 'SW', 'NE']
    obs.formats = [None, None, lambda v: format(v, '.0f')[:3]]
    obs.vector_field = ('u_wind', 'v_wind')
    obs.reduce_points = 0

    # Add map features for the particular panel
    panel = mpplots.MapPanel()
    panel.layout = (1, 1, 1)
    panel.area = (-124, -72, 20, 53)
    panel.projection = 'lcc'
    panel.layers = ['coastline', 'borders', 'states', 'land', 'ocean']
    panel.plots = [obs]

    # Collecting panels for complete figure
    pc = mpplots.PanelContainer()
    pc.size = (15, 10)
    pc.panels = [panel]

    # Showing the results
    pc.show()



.. image:: /examples/plots/images/sphx_glr_upperair_declarative_001.png
    :alt: temperature and dewpoint and height@500 hectopascal
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /opt/hostedtoolcache/Python/3.8.6/x64/lib/python3.8/site-packages/cartopy/io/__init__.py:260: DownloadWarning: Downloading: https://naciscdn.org/naturalearth/50m/physical/ne_50m_land.zip
      warnings.warn('Downloading: {}'.format(url), DownloadWarning)





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.599 seconds)


.. _sphx_glr_download_examples_plots_upperair_declarative.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: upperair_declarative.py <upperair_declarative.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: upperair_declarative.ipynb <upperair_declarative.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
